{"version":3,"sources":["components/SearchBar.tsx","components/SearchResult.tsx","components/CountryInfo.tsx","components/Loading.tsx","components/SocialLink.tsx","components/Footer.tsx","scripts/api.ts","scripts/utility.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchBar","onChangeFcn","inputEl","useRef","useEffect","current","focus","className","placeholder","onChange","ref","type","SearchResult","countryName","alpha3Code","fcn","onClick","CountryInfo","capital","population","area","alternateNames","region","subRegion","url","description","src","alt","map","item","shortid","generate","Loading","SocialLink","faName","link","children","href","target","Footer","baseUrl","getCountriesByTerm","term","a","fetch","res","ok","json","getCountryByAlpha3Code","code","formatResults","data","name","App","useState","results","noResults","search","updateSearch","result","updateResult","resultIsLoading","updateResultIsLoading","length","then","catch","err","alert","event","value","country","altSpellings","subregion","flag","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbf3bdc6.chunk.js","sourcesContent":["import React, { FunctionComponent, useEffect, useRef } from 'react';\n\nconst SearchBar: FunctionComponent<any> = ({ onChangeFcn }) => {\n  const inputEl: any = useRef(null);\n  useEffect(() => {\n    inputEl.current.focus();\n  }, []);\n  return (\n    <input\n      className=\"searchbar\"\n      placeholder=\"Search\"\n      onChange={onChangeFcn}\n      ref={inputEl}\n      type=\"text\"\n    />\n  );\n};\n\nexport default SearchBar;\n","import React, { FunctionComponent } from 'react';\n\nimport { OnClick, SearchResultProps } from '../types';\n\nconst SearchResult: FunctionComponent<SearchResultProps & OnClick> = ({\n  countryName,\n  alpha3Code,\n  fcn,\n}) => {\n  return (\n    <button className=\"searchresult\" type=\"button\" onClick={fcn}>\n      <span>{countryName} - </span>\n      <span>{alpha3Code}</span>\n    </button>\n  );\n};\n\nexport default SearchResult;\n","import React, { FunctionComponent } from 'react';\nimport shortid from 'shortid';\nimport { Description } from '../types';\n\nconst CountryInfo: FunctionComponent<Description> = ({\n  countryName,\n  alpha3Code,\n  capital,\n  population,\n  area,\n  alternateNames,\n  region,\n  subRegion,\n  url,\n  description,\n}) => {\n  return (\n    <section className=\"countryinfo\">\n      <h2 className=\"countryinfo__title\">{`${countryName} (${alpha3Code})`}</h2>\n      <figure className=\"countryinfo__figure\">\n        <img src={url} alt={description} />\n        <figcaption>{description}</figcaption>\n      </figure>\n      <aside className=\"countryinfo__basic\">\n        <h3 className=\"countryinfo__cattitle\">Basic Info</h3>\n        <div>{`Capital: ${capital}`}</div>\n        <div>{`Population: ${population}`}</div>\n        <div>{`Area: ${area}`}</div>\n      </aside>\n      <aside className=\"countryinfo__region\">\n        <h3 className=\"countryinfo__cattitle\">Region Info</h3>\n        <div>{`Region: ${region}`}</div>\n        <div>{`Subregion: ${subRegion}`}</div>\n      </aside>\n      <aside className=\"countryinfo__altnames\">\n        <h3 className=\"countryinfo__cattitle\">Alternate Names</h3>\n        <ul>\n          {alternateNames?.map((item) => (\n            <li key={shortid.generate()}>{item}</li>\n          ))}\n        </ul>\n      </aside>\n    </section>\n  );\n};\n\nexport default CountryInfo;\n","import React, { FunctionComponent } from 'react';\n\nconst Loading: FunctionComponent = () => {\n  return <div className=\"loading\">Loading...</div>;\n};\n\nexport default Loading;\n","import React, { FunctionComponent } from 'react';\nimport { SocialProps } from '../types';\n\nconst SocialLink: FunctionComponent<SocialProps> = ({\n  faName,\n  link,\n  children,\n}) => {\n  return (\n    <a href={link} target=\"__blank\" className=\"footer__social__link\">\n      <i className={`fab fa-${faName}`}>\n        <span className=\"footer__social__name\">{children}</span>\n      </i>\n    </a>\n  );\n};\n\nexport default SocialLink;\n","import React from 'react';\nimport SocialLink from './SocialLink';\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <div className=\"footer__social\">\n        <span>Connect with me online!</span>\n        <SocialLink\n          faName=\"github\"\n          link=\"https://github.com/anartisticengineer\"\n        >\n          anartisticengineer\n        </SocialLink>\n        <SocialLink\n          faName=\"linkedin-in\"\n          link=\"https://www.linkedin.com/in/justinjohnson95\"\n        >\n          LinkedIn\n        </SocialLink>\n      </div>\n      <div className=\"footer__copyright\">&copy; Justin Johnson 2021</div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","const baseUrl: String = 'https://restcountries.eu/rest/v2/';\n\nconst getCountriesByTerm = async (term: String) => {\n  const res = await fetch(`${baseUrl}name/${term}`);\n  return res.ok ? res.json() : [];\n};\n\nconst getCountryByAlpha3Code = async (code: String) => {\n  const res = await fetch(`${baseUrl}alpha/${code}`);\n  return res.ok ? res.json() : {};\n};\n\nexport { getCountriesByTerm, getCountryByAlpha3Code };\n","/* eslint-disable import/extensions */\n/* eslint-disable import/no-unresolved */\nimport { SearchResultProps } from '../types';\n\nconst formatResults = (data: any[]): SearchResultProps[] => {\n  return data.map(({ name, alpha3Code }) => {\n    const x: SearchResultProps = { countryName: name, alpha3Code };\n    return x;\n  });\n};\n\nexport default formatResults;\n","import React, { useState, useEffect } from 'react';\nimport shortid from 'shortid';\nimport SearchBar from './components/SearchBar';\nimport SearchResult from './components/SearchResult';\nimport CountryInfo from './components/CountryInfo';\nimport Loading from './components/Loading';\nimport Footer from './components/Footer';\nimport { getCountriesByTerm, getCountryByAlpha3Code } from './scripts/api';\nimport { Description } from './types';\nimport formatResults from './scripts/utility';\n\nimport './styles/index.scss';\n\nfunction App() {\n  const initialResult: Description = {\n    countryName: '',\n    alpha3Code: '',\n    capital: '',\n    population: 0,\n    area: 0,\n    alternateNames: null,\n    region: '',\n    subRegion: null,\n    url: '',\n    description: '',\n  };\n\n  // States\n  const [search, updateSearch] = useState({\n    term: '',\n    results: [],\n    noResults: false,\n  });\n  const [result, updateResult] = useState(initialResult);\n  const [resultIsLoading, updateResultIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (search.term.length > 2) {\n      getCountriesByTerm(search.term)\n        .then((data) =>\n          updateSearch({\n            ...search,\n            results: data,\n            noResults: data.length === 0,\n          })\n        )\n        .catch((err) => alert(err));\n    }\n  }, [search.term]);\n\n  const handleSearchChange = (event: any) => {\n    updateSearch({ ...search, term: event.target.value });\n  };\n\n  const handleClickedResult = (code: String) => {\n    updateResultIsLoading(true);\n    getCountryByAlpha3Code(code)\n      .then((country) => {\n        updateResultIsLoading(false);\n        updateResult({\n          countryName: country.name,\n          alpha3Code: country.alpha3Code,\n          capital: country.capital,\n          population: country.population,\n          area: country.area,\n          alternateNames: country.altSpellings,\n          region: country.region,\n          subRegion: country.subregion,\n          url: country.flag,\n          description: `Flag of ${country.name}`,\n        });\n      })\n      .catch((err) => alert(err));\n  };\n\n  return (\n    <main className=\"container\">\n      <header className=\"container__header\">\n        <h1>World Encyclopedia</h1>\n        <SearchBar onChangeFcn={handleSearchChange} />\n        {!search.noResults ? (\n          <ul>\n            {formatResults(search.results).map(\n              ({ countryName, alpha3Code }) => (\n                <li key={shortid.generate()}>\n                  <SearchResult\n                    countryName={countryName}\n                    alpha3Code={alpha3Code}\n                    fcn={() => handleClickedResult(alpha3Code)}\n                  />\n                </li>\n              )\n            )}\n          </ul>\n        ) : (\n          <div className=\"container__noresults\">No Results!</div>\n        )}\n      </header>\n      {result.countryName ? (\n        <CountryInfo\n          countryName={result.countryName}\n          alpha3Code={result.alpha3Code}\n          capital={result.capital}\n          population={result.population}\n          area={result.area}\n          alternateNames={result.alternateNames}\n          region={result.region}\n          subRegion={result.subRegion}\n          url={result.url}\n          description={result.description}\n        />\n      ) : null}\n      {resultIsLoading ? <Loading /> : null}\n      <Footer />\n    </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}